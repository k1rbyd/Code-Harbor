==> syntatically, interface and abstract classes are almost the same

==> but from the thinking perspective and usage perspective, interface is very very different

eg,

==> after creating a interface

public interface GamingConsole
{
    public void up();
    public void down();
    public void left();
    public void right();
}

and we can connect this to a class by making it inherit this interface,

        ==> but we cant use extends, here we use implements

public class MarioGame implements GamingConsole
{
    public void up()
    {
        System.out.println("Jump");
    }
    public void down()
    {
        System.out.println("Duck");
    }
    public void left()
    {
        System.out.println("Left");
    }
    public void right()
    {
        System.out.println("Right");
    }
}

and then we can just run this class as any other class,

public static void main(String[] args)
{
    GamingConsole game = new MarioGame();
    game.up();
    game.down();
    game.left();
    game.right();
}


here, we can also make new ones, suppose there is some other game called Chezz

public static void main(String[] args)
{
    GamingConsole game = new MarioGame();
    GamingConsole game1 = new Chezz();    
    game.up();
    game.down();
    game.left();
    game.right();

    game1.up();
    game1.down();
    game1.left();
    game1.right();
}


