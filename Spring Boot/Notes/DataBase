
==> Relational Databases are the main option here
		{MySQL , PostGres}
		
==> JDBC, this is also quite important

==> Lombok is usually preferred here


Connecting to an In-Memory DataBase:

==> heres, the code

package com.example.Database;

import javax.sql.DataSource;
import java.util.logging.Logger;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.jdbc.core.JdbcTemplate;

@SpringBootApplication
public class DatabaseApplication implements CommandLineRunner {

    private final DataSource dataSource;
    private static final Logger log = Logger.getLogger(DatabaseApplication.class.getName());

    public DatabaseApplication(final DataSource dataSource) {
        this.dataSource = dataSource;
    }

    public static void main(String[] args) {
        SpringApplication.run(DatabaseApplication.class, args);
    }

    @Override
    public void run(final String... args) {
        log.info("Datasource: " + dataSource.toString());
        final JdbcTemplate restTemplate = new JdbcTemplate(dataSource);
        restTemplate.execute("select 1");

        log.info("SQL query executed successfully");
    }
}


and here are the application properties,

spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password




==> Connection to an real life server: {Postgre-SQL}

package com.example.RealTimeConnectionDB;

import javax.sql.DataSource;
import java.util.logging.Logger;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.jdbc.core.JdbcTemplate;

@SpringBootApplication
public class RealTimeConnectionDbApplication implements CommandLineRunner{
	
    private final DataSource dataSource;
    private static final Logger log = Logger.getLogger(RealTimeConnectionDbApplication.class.getName());

    public RealTimeConnectionDbApplication(final DataSource dataSource) {
        this.dataSource = dataSource;
    }

    public static void main(String[] args) {
        SpringApplication.run(RealTimeConnectionDbApplication.class, args);
    }

    @Override
    public void run(final String... args) {
        log.info("Datasource: " + dataSource.toString());
        final JdbcTemplate restTemplate = new JdbcTemplate(dataSource);
        restTemplate.execute("select 1");

        log.info("SQL query executed successfully");
    }
}


version: '3.1'

services:
  db:
    image: postgres
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_PASSWORD: password


spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=password
spring.datasource.driver-class-name=org.postgresql.Driver






==> inorder to create a JDBC template creation and stuff, 
	--> we have to create a new package in the src/main/java file and then create a confg
	--> then we have to, 
	
		@Configuration
		public class DatabaseConfig {
		
			@Bean
			public JdbcTemplate jdbcTemplate(final DataSource dataSource){
				return new JdbcTemplate(dataSource);
			}
		
		}
